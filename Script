#1.- Importing Packages and DataFrames
crimpob = pd.read_csv('crimenes_2021.csv',
                index_col='ID'
                )
crimpob

#2. Exploratory Data Analysis
#2.1. Data cleaning
crimpob_lc = crimpob[(crimpob['DEPARTAMENTO'].isin(['LIMA', 'CALLAO'])) &
                     ((crimpob['PROVINCIA'] == 'LIMA') | 
                      (crimpob['DEPARTAMENTO'] == 'CALLAO'))]
crimpob_lc

crimpob_lc.dropna()
crimpob_lc.info()

#2.2. Data Visualization
plt.style.use('fast')
plt.figure(figsize=(14, 8))
plt.subplot(1, 2, 1)
sns.violinplot(data=crimpob_lc,
               x='DEPARTAMENTO',
               y='NUMERO_DE_INGRESOS',
               )
plt.title('Distribución de número de ingresos por departamento')

plt.subplot(1, 2, 2)
sns.violinplot(data=crimpob_lc,
               x='DEPARTAMENTO',
               y='EDAD'
              )
plt.title('Distribución de edad por departamento')

plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.violinplot(x='DEPARTAMENTO', y='ALCOHOLISMO_KPI', data=crimpob_lc)
plt.title('Distribución de Alcoholismo por departamento')
plt.xlabel('Departamento')
plt.ylabel('Alcoholismo')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.violinplot(x='DEPARTAMENTO', y='TABAQUISMO_KPI', data=crimpob_lc)
plt.title('Distribución de tabaquismo por departamento')
plt.xlabel('Departamento')
plt.ylabel('Tabaquismo')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.violinplot(x='DEPARTAMENTO', y='DROGADICCION_KPI', data=crimpob_lc)
plt.title('Distribución de drogadicción por departamento')
plt.xlabel('Departamento')
plt.ylabel('Drogadicción')
plt.tight_layout()
plt.show()

sns.violinplot(x='DEPARTAMENTO', y='NUMERO_DE_INGRESOS', data=crimpob_lc)
plt.title('Distribución de drogadicción por departamento')
plt.xlabel('Departamento')
plt.ylabel('Drogadicción')
plt.tight_layout()
plt.show()

matriz = crimpob_lc[['EXTRAPULMUNAR_KPI', 'NUEVO_KPI', 'RECAIDA_KPI', 'TIENE_ANTECEDENTE_DE_VIH_PREVIO_A_LA_TB', 'RECIBIO_CONSEJERIA_PRE_TEST_PARA_VIH', 'SE_REALIZO_PRUEBA_DE_VIH', 'RESULTADO_DE_LA_PRUEBA_DE_VIH', 'DIAGNOSTICO_DE_DIABETES_POR_PRUEBA_DE_GLICEMIA', 'DELITO_ESPECIFICO', 'SEXO_HOMBRE_KPI', 'NUMERO_DE_INGRESOS', 'GRUPOS_DE_INGRESOS', 'PRIMARIOS_KPI', 'DOS_INGRESOS_KPI', 'EDAD', 'GRUPO_ETAREO']].corr()

plt.figure(figsize=(12,6))
sns.heatmap(matriz,
           cmap='vlag_r',
            square=True,
            annot=True
           )

sns.regplot(data=crimpob_lc,
           x='PRIMARIOS_KPI',
            y='DOS_INGRESOS_KPI',
            scatter_kws={'s':10}
           )

sns.regplot(data=crimpob_lc,
           x='RECAIDA_KPI',
            y='NUEVO_KPI',
            scatter_kws={'s':10}
           )
#2.3. Geo Analysis
data = open('lima_callao_distritos.geojson',
           encoding='utf8'
           )
distritos = json.load(data)
distritos
print(type(distritos))
distritos.keys()
distritos['features'][10]['properties']
id = []
distrito = []

for idx in range(len(distritos['features'])):
    id.append(distritos['features'][idx]['properties']['id'])
    distrito.append(distritos['features'][idx]['properties']['distrito'])
geojson_df = pd.DataFrame({
    'id':id,
    'distrito':distrito
})
geojson_df
geojson_df['color']=10
fig = px.choropleth_mapbox(geojson_df,
                           geojson=distritos,
                           locations='id',
                           featureidkey='properties.id',
                           color='color',
                           mapbox_style='carto-positron',
                           zoom=8,
                           center={'lat':-12.041377,
                                   'lon': -77.039402},
                           opacity=0.4,
                           hover_data=['distrito']
)

crim = px.scatter_mapbox(crimpob_lc,
                            lat='LATITUD',
                            lon='LONGITUD',
                            hover_name='DISTRITO',
                            color_discrete_sequence=["red"]
)

fig.add_trace(crim.data[0])
fig = px.scatter_mapbox(crimpob_lc,
                        lat='LATITUD',
                        lon='LONGITUD',
                        mapbox_style='carto-positron',
                        zoom=10, #ciudad 
                        hover_name='DISTRITO',
                        color='DELITO_GENERICO',
                        size='NUMERO_DE_INGRESOS',
                        size_max=20 #limita el tamaño del punto
                        )
fig.update_layout(margin={'r':0,'t':0,'l':0,'b':0}) #elimina el marco
fig.show()

import plotly.express as px

fig = px.density_mapbox(crimpob_lc,
                        lat='LATITUD',
                        lon='LONGITUD',
                        mapbox_style='stamen-terrain',
                        color_continuous_scale='inferno',
                        zoom=10,
                        z='EDAD',  # Utiliza GRUPOS_DE_INGRESOS como la variable de intensidad
                        radius=5,
                        opacity=1,
                        center={
                            'lat': -12.055710,
                            'lon': -77.032658
                        })
fig.update_layout(
    margin={'r': 0, 't': 0, 'b': 0, 'l': 0}
)
fig.show()

crimpob_h3 = crimpob_lc.copy()

RES = 8
crimpob_h3['h3'] = crimpob_h3.apply(lambda x: h3.geo_to_h3(x.LATITUD, x.LONGITUD, RES), axis=1)
crimpob_h3.head()
import pydeck as pdk

layer = pdk.Layer(
    "H3HexagonLayer",  # Design
    crimpob_h3,
    pickable=True,  # Selectable
    stroked=True,  # Show hexagon area boundaries
    filled=True,  # Fill hexagons with color
    extruded=False,
    get_hexagon="h3",
    get_fill_color="[255, 255, 100, 50]",
    get_line_color=[255, 255, 255],
    line_width_min_pixels=2,
)

view_state = pdk.ViewState(
    latitude=-12.041377,
    longitude=-77.039402,
    zoom=10,
    bearing=0,
    pitch=30  # Pitch or tilt of the map
)

deck = pdk.Deck(
    layers=[layer],
    initial_view_state=view_state,
    tooltip={"text": "fake text"}
)

# Render the visualization and save as an HTML file
deck.to_html("h3_hexagon_layer.html")

#3. Data preprocessing

drop_columns = ['PULMONAR_KPI', 'LOCALIZACION_TB', 'CONDICION_INGRESO', 'ABANDONO_RECUPERADO_KPI','ALCOHOLISMO', 'TABAQUISMO', 'DROGADICCION', 'SEXO', 'SEXO_MUJER_KPI', 'TRES_INGRESOS_KPI', 'RECIBE_TARGA', 'TIPO_DE_SEGURO_DE_SALUD', 'ALCOHOLISMO_KPI', 'TABAQUISMO_KPI', 'DROGADICCION_KPI', 'DELITO_GENERICO', 'SITUACION_JURIDICA', 'GRADO_DE_INSTRUCCION', 'OCUPACION_GENERICA', 'OCUPACION_ESPECIFICA', 'ESTADO_CIVIL', 'RANGO_DE_EDAD']
for column in drop_columns:
    crimpob_lc.drop(column, axis=1, inplace=True)
crimpob_lc.info()

#4. DBSCAN
from sklearn.cluster import DBSCAN
from geopy.distance import great_circle
from shapely.geometry import MultiPoint

KM_EPSILON = 0.5
MIN_SAMPLES = 6

def get_centermostpoint(cluster):
    centroid = (MultiPoint(cluster).centroid.x, MultiPoint(cluster).centroid.y)
    centermost_point = min(cluster, key=lambda point: great_circle(point,centroid).m)
    return tuple(centermost_point)

print('Dataset Original', len(crimpob_lc))

crimpob_lc_clean = crimpob_h3[~crimpob_h3['LATITUD'].isna()]
print('Dataset limpio', len(crimpob_lc_clean))

coords_cluster = crimpob_lc_clean[['LATITUD', 'LONGITUD']].to_numpy()
coords_cluster

kms_per_radian = 6371.0088
epsilon = KM_EPSILON / kms_per_radian

db = DBSCAN(eps=epsilon,
           min_samples=MIN_SAMPLES,
            algorithm='ball_tree',
            metric='haversine'
           ).fit(np.radians(coords_cluster))

cluster_labels = db.labels_
cluster_labels

#creating clusters
num_clusters = len(set(cluster_labels))
clusters = pd.Series([coords_cluster[cluster_labels == n] for n in range(num_clusters)]).iloc[:-1]
print('Numero de clusters: {}'.format(num_clusters))

#Obtenemos el centro de nuestros clusters
centermost_points = clusters.map(get_centermostpoint)

#creamos un dataframe con los clusters encontrados
lats, lons = zip(*centermost_points)
rep_points = pd.DataFrame({'lat':lats, 'lon':lons})
rep_points['size'] = 5
rep_points

fig = px.choropleth_mapbox(geojson_df,
                           geojson=distritos,
                           locations='id',
                           featureidkey='properties.id',
                           color='color',
                           mapbox_style='carto-positron',
                           zoom=8,
                           center={'lat':-12.041377,
                                   'lon': -77.039402},
                           opacity=0.4,
                           hover_data=['distrito']
                          )

incidentes_cluster = px.scatter_mapbox(rep_points,
                                      lat="lat",
                                       lon="lon", 
                                       hover_name="size",
                                       hover_data=["size"],
                                       mapbox_style="carto-positron",
                                       zoom=10,
                                       center={
                                           'lat':-12.036891,
                                           'lon':-77.026508
                                       },
                                       opacity=0.6,
                                       color_discrete_sequence=['red']
                                      )

fig.add_trace(incidentes_cluster.data[0])

fig = px.choropleth_mapbox(geojson_df,
                           geojson=distritos,
                           locations='id',
                           featureidkey='properties.id',
                           color='color',
                           mapbox_style='carto-positron',
                           zoom=8,
                           center={'lat':-12.041377,
                                   'lon': -77.039402},
                           opacity=0.4,
                           hover_data=['distrito']
                          )

incidentes_cluster = px.scatter_mapbox(rep_points,
                                      lat="lat",
                                       lon="lon", 
                                       hover_name="size",
                                       hover_data=["size"],
                                       mapbox_style="carto-positron",
                                       zoom=10,
                                       center={
                                           'lat':-12.036891,
                                           'lon':-77.026508
                                       },
                                       opacity=0.6,
                                       color_discrete_sequence=['red']
                                      )

fig.add_trace(incidentes_cluster.data[0])
